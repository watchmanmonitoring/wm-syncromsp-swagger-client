=begin
#Syncro

#Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.    

OpenAPI spec version: v1
Contact: help@syncromsp.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module WmSyncromspSwaggerClient
  class InvoicesLineItems
    attr_accessor :item

    attr_accessor :name

    attr_accessor :product_id

    attr_accessor :quantity

    attr_accessor :cost

    attr_accessor :price

    attr_accessor :discount_percent

    attr_accessor :taxable

    attr_accessor :upc_code

    attr_accessor :tax_note

    attr_accessor :wholesale

    attr_accessor :invoice_bundle_id

    attr_accessor :tax_rate_id

    attr_accessor :user_id

    attr_accessor :position

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'item' => :'item',
        :'name' => :'name',
        :'product_id' => :'product_id',
        :'quantity' => :'quantity',
        :'cost' => :'cost',
        :'price' => :'price',
        :'discount_percent' => :'discount_percent',
        :'taxable' => :'taxable',
        :'upc_code' => :'upc_code',
        :'tax_note' => :'tax_note',
        :'wholesale' => :'wholesale',
        :'invoice_bundle_id' => :'invoice_bundle_id',
        :'tax_rate_id' => :'tax_rate_id',
        :'user_id' => :'user_id',
        :'position' => :'position'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'item' => :'Object',
        :'name' => :'Object',
        :'product_id' => :'Object',
        :'quantity' => :'Object',
        :'cost' => :'Object',
        :'price' => :'Object',
        :'discount_percent' => :'Object',
        :'taxable' => :'Object',
        :'upc_code' => :'Object',
        :'tax_note' => :'Object',
        :'wholesale' => :'Object',
        :'invoice_bundle_id' => :'Object',
        :'tax_rate_id' => :'Object',
        :'user_id' => :'Object',
        :'position' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WmSyncromspSwaggerClient::InvoicesLineItems` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WmSyncromspSwaggerClient::InvoicesLineItems`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'item')
        self.item = attributes[:'item']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'discount_percent')
        self.discount_percent = attributes[:'discount_percent']
      end

      if attributes.key?(:'taxable')
        self.taxable = attributes[:'taxable']
      end

      if attributes.key?(:'upc_code')
        self.upc_code = attributes[:'upc_code']
      end

      if attributes.key?(:'tax_note')
        self.tax_note = attributes[:'tax_note']
      end

      if attributes.key?(:'wholesale')
        self.wholesale = attributes[:'wholesale']
      end

      if attributes.key?(:'invoice_bundle_id')
        self.invoice_bundle_id = attributes[:'invoice_bundle_id']
      end

      if attributes.key?(:'tax_rate_id')
        self.tax_rate_id = attributes[:'tax_rate_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          item == o.item &&
          name == o.name &&
          product_id == o.product_id &&
          quantity == o.quantity &&
          cost == o.cost &&
          price == o.price &&
          discount_percent == o.discount_percent &&
          taxable == o.taxable &&
          upc_code == o.upc_code &&
          tax_note == o.tax_note &&
          wholesale == o.wholesale &&
          invoice_bundle_id == o.invoice_bundle_id &&
          tax_rate_id == o.tax_rate_id &&
          user_id == o.user_id &&
          position == o.position
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [item, name, product_id, quantity, cost, price, discount_percent, taxable, upc_code, tax_note, wholesale, invoice_bundle_id, tax_rate_id, user_id, position].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        WmSyncromspSwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
