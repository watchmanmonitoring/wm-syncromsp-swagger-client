=begin
#Syncro

#Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.    

OpenAPI spec version: v1
Contact: help@syncromsp.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module WmSyncromspSwaggerClient
  class Body19
    attr_accessor :customer_id

    attr_accessor :invoice_id

    attr_accessor :invoice_number

    attr_accessor :amount_cents

    attr_accessor :address_street

    attr_accessor :address_city

    attr_accessor :address_zip

    attr_accessor :payment_method

    attr_accessor :ref_num

    attr_accessor :register_id

    attr_accessor :signature_name

    attr_accessor :signature_data

    attr_accessor :signature_date

    attr_accessor :credit_card_number

    attr_accessor :date_month

    attr_accessor :date_year

    attr_accessor :cvv

    attr_accessor :lastname

    attr_accessor :firstname

    # Object where a key is an Invoice ID and a value is a payment amount to be applied to the invoice.
    attr_accessor :apply_payments

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer_id' => :'customer_id',
        :'invoice_id' => :'invoice_id',
        :'invoice_number' => :'invoice_number',
        :'amount_cents' => :'amount_cents',
        :'address_street' => :'address_street',
        :'address_city' => :'address_city',
        :'address_zip' => :'address_zip',
        :'payment_method' => :'payment_method',
        :'ref_num' => :'ref_num',
        :'register_id' => :'register_id',
        :'signature_name' => :'signature_name',
        :'signature_data' => :'signature_data',
        :'signature_date' => :'signature_date',
        :'credit_card_number' => :'credit_card_number',
        :'date_month' => :'date_month',
        :'date_year' => :'date_year',
        :'cvv' => :'cvv',
        :'lastname' => :'lastname',
        :'firstname' => :'firstname',
        :'apply_payments' => :'apply_payments'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'customer_id' => :'Object',
        :'invoice_id' => :'Object',
        :'invoice_number' => :'Object',
        :'amount_cents' => :'Object',
        :'address_street' => :'Object',
        :'address_city' => :'Object',
        :'address_zip' => :'Object',
        :'payment_method' => :'Object',
        :'ref_num' => :'Object',
        :'register_id' => :'Object',
        :'signature_name' => :'Object',
        :'signature_data' => :'Object',
        :'signature_date' => :'Object',
        :'credit_card_number' => :'Object',
        :'date_month' => :'Object',
        :'date_year' => :'Object',
        :'cvv' => :'Object',
        :'lastname' => :'Object',
        :'firstname' => :'Object',
        :'apply_payments' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WmSyncromspSwaggerClient::Body19` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WmSyncromspSwaggerClient::Body19`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'invoice_id')
        self.invoice_id = attributes[:'invoice_id']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'amount_cents')
        self.amount_cents = attributes[:'amount_cents']
      end

      if attributes.key?(:'address_street')
        self.address_street = attributes[:'address_street']
      end

      if attributes.key?(:'address_city')
        self.address_city = attributes[:'address_city']
      end

      if attributes.key?(:'address_zip')
        self.address_zip = attributes[:'address_zip']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'ref_num')
        self.ref_num = attributes[:'ref_num']
      end

      if attributes.key?(:'register_id')
        self.register_id = attributes[:'register_id']
      end

      if attributes.key?(:'signature_name')
        self.signature_name = attributes[:'signature_name']
      end

      if attributes.key?(:'signature_data')
        self.signature_data = attributes[:'signature_data']
      end

      if attributes.key?(:'signature_date')
        self.signature_date = attributes[:'signature_date']
      end

      if attributes.key?(:'credit_card_number')
        self.credit_card_number = attributes[:'credit_card_number']
      end

      if attributes.key?(:'date_month')
        self.date_month = attributes[:'date_month']
      end

      if attributes.key?(:'date_year')
        self.date_year = attributes[:'date_year']
      end

      if attributes.key?(:'cvv')
        self.cvv = attributes[:'cvv']
      end

      if attributes.key?(:'lastname')
        self.lastname = attributes[:'lastname']
      end

      if attributes.key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.key?(:'apply_payments')
        self.apply_payments = attributes[:'apply_payments']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer_id == o.customer_id &&
          invoice_id == o.invoice_id &&
          invoice_number == o.invoice_number &&
          amount_cents == o.amount_cents &&
          address_street == o.address_street &&
          address_city == o.address_city &&
          address_zip == o.address_zip &&
          payment_method == o.payment_method &&
          ref_num == o.ref_num &&
          register_id == o.register_id &&
          signature_name == o.signature_name &&
          signature_data == o.signature_data &&
          signature_date == o.signature_date &&
          credit_card_number == o.credit_card_number &&
          date_month == o.date_month &&
          date_year == o.date_year &&
          cvv == o.cvv &&
          lastname == o.lastname &&
          firstname == o.firstname &&
          apply_payments == o.apply_payments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [customer_id, invoice_id, invoice_number, amount_cents, address_street, address_city, address_zip, payment_method, ref_num, register_id, signature_name, signature_data, signature_date, credit_card_number, date_month, date_year, cvv, lastname, firstname, apply_payments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        WmSyncromspSwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
