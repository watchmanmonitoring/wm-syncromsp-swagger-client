=begin
#Syncro

#Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.    

OpenAPI spec version: v1
Contact: help@syncromsp.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module WmSyncromspSwaggerClient
  class Body24
    attr_accessor :price_cost

    attr_accessor :price_retail

    attr_accessor :condition

    attr_accessor :description

    attr_accessor :maintain_stock

    attr_accessor :name

    attr_accessor :quantity

    attr_accessor :warranty

    attr_accessor :sort_order

    attr_accessor :reorder_at

    attr_accessor :disabled

    attr_accessor :taxable

    attr_accessor :product_category

    attr_accessor :upc_code

    attr_accessor :discount_percent

    attr_accessor :warranty_template_id

    attr_accessor :qb_item_id

    attr_accessor :desired_stock_level

    attr_accessor :price_wholesale

    attr_accessor :notes

    attr_accessor :tax_rate_id

    attr_accessor :vendor_ids

    attr_accessor :physical_location

    attr_accessor :serialized

    attr_accessor :category_ids

    attr_accessor :product_skus_attributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'price_cost' => :'price_cost',
        :'price_retail' => :'price_retail',
        :'condition' => :'condition',
        :'description' => :'description',
        :'maintain_stock' => :'maintain_stock',
        :'name' => :'name',
        :'quantity' => :'quantity',
        :'warranty' => :'warranty',
        :'sort_order' => :'sort_order',
        :'reorder_at' => :'reorder_at',
        :'disabled' => :'disabled',
        :'taxable' => :'taxable',
        :'product_category' => :'product_category',
        :'upc_code' => :'upc_code',
        :'discount_percent' => :'discount_percent',
        :'warranty_template_id' => :'warranty_template_id',
        :'qb_item_id' => :'qb_item_id',
        :'desired_stock_level' => :'desired_stock_level',
        :'price_wholesale' => :'price_wholesale',
        :'notes' => :'notes',
        :'tax_rate_id' => :'tax_rate_id',
        :'vendor_ids' => :'vendor_ids',
        :'physical_location' => :'physical_location',
        :'serialized' => :'serialized',
        :'category_ids' => :'category_ids',
        :'product_skus_attributes' => :'product_skus_attributes'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'price_cost' => :'Object',
        :'price_retail' => :'Object',
        :'condition' => :'Object',
        :'description' => :'Object',
        :'maintain_stock' => :'Object',
        :'name' => :'Object',
        :'quantity' => :'Object',
        :'warranty' => :'Object',
        :'sort_order' => :'Object',
        :'reorder_at' => :'Object',
        :'disabled' => :'Object',
        :'taxable' => :'Object',
        :'product_category' => :'Object',
        :'upc_code' => :'Object',
        :'discount_percent' => :'Object',
        :'warranty_template_id' => :'Object',
        :'qb_item_id' => :'Object',
        :'desired_stock_level' => :'Object',
        :'price_wholesale' => :'Object',
        :'notes' => :'Object',
        :'tax_rate_id' => :'Object',
        :'vendor_ids' => :'Object',
        :'physical_location' => :'Object',
        :'serialized' => :'Object',
        :'category_ids' => :'Object',
        :'product_skus_attributes' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WmSyncromspSwaggerClient::Body24` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WmSyncromspSwaggerClient::Body24`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'price_cost')
        self.price_cost = attributes[:'price_cost']
      end

      if attributes.key?(:'price_retail')
        self.price_retail = attributes[:'price_retail']
      end

      if attributes.key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'maintain_stock')
        self.maintain_stock = attributes[:'maintain_stock']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'warranty')
        self.warranty = attributes[:'warranty']
      end

      if attributes.key?(:'sort_order')
        self.sort_order = attributes[:'sort_order']
      end

      if attributes.key?(:'reorder_at')
        self.reorder_at = attributes[:'reorder_at']
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'taxable')
        self.taxable = attributes[:'taxable']
      end

      if attributes.key?(:'product_category')
        self.product_category = attributes[:'product_category']
      end

      if attributes.key?(:'upc_code')
        self.upc_code = attributes[:'upc_code']
      end

      if attributes.key?(:'discount_percent')
        self.discount_percent = attributes[:'discount_percent']
      end

      if attributes.key?(:'warranty_template_id')
        self.warranty_template_id = attributes[:'warranty_template_id']
      end

      if attributes.key?(:'qb_item_id')
        self.qb_item_id = attributes[:'qb_item_id']
      end

      if attributes.key?(:'desired_stock_level')
        self.desired_stock_level = attributes[:'desired_stock_level']
      end

      if attributes.key?(:'price_wholesale')
        self.price_wholesale = attributes[:'price_wholesale']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'tax_rate_id')
        self.tax_rate_id = attributes[:'tax_rate_id']
      end

      if attributes.key?(:'vendor_ids')
        if (value = attributes[:'vendor_ids']).is_a?(Array)
          self.vendor_ids = value
        end
      end

      if attributes.key?(:'physical_location')
        self.physical_location = attributes[:'physical_location']
      end

      if attributes.key?(:'serialized')
        self.serialized = attributes[:'serialized']
      end

      if attributes.key?(:'category_ids')
        if (value = attributes[:'category_ids']).is_a?(Array)
          self.category_ids = value
        end
      end

      if attributes.key?(:'product_skus_attributes')
        if (value = attributes[:'product_skus_attributes']).is_a?(Array)
          self.product_skus_attributes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.nil?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          price_cost == o.price_cost &&
          price_retail == o.price_retail &&
          condition == o.condition &&
          description == o.description &&
          maintain_stock == o.maintain_stock &&
          name == o.name &&
          quantity == o.quantity &&
          warranty == o.warranty &&
          sort_order == o.sort_order &&
          reorder_at == o.reorder_at &&
          disabled == o.disabled &&
          taxable == o.taxable &&
          product_category == o.product_category &&
          upc_code == o.upc_code &&
          discount_percent == o.discount_percent &&
          warranty_template_id == o.warranty_template_id &&
          qb_item_id == o.qb_item_id &&
          desired_stock_level == o.desired_stock_level &&
          price_wholesale == o.price_wholesale &&
          notes == o.notes &&
          tax_rate_id == o.tax_rate_id &&
          vendor_ids == o.vendor_ids &&
          physical_location == o.physical_location &&
          serialized == o.serialized &&
          category_ids == o.category_ids &&
          product_skus_attributes == o.product_skus_attributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [price_cost, price_retail, condition, description, maintain_stock, name, quantity, warranty, sort_order, reorder_at, disabled, taxable, product_category, upc_code, discount_percent, warranty_template_id, qb_item_id, desired_stock_level, price_wholesale, notes, tax_rate_id, vendor_ids, physical_location, serialized, category_ids, product_skus_attributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        WmSyncromspSwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
