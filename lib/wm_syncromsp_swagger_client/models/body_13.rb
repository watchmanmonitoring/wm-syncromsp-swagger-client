=begin
#Syncro

#Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.    

OpenAPI spec version: v1
Contact: help@syncromsp.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module WmSyncromspSwaggerClient
  class Body13
    attr_accessor :customer_id

    attr_accessor :number

    attr_accessor :date

    attr_accessor :customer_business_then_name

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :due_date

    attr_accessor :subtotal

    attr_accessor :total

    attr_accessor :tax

    attr_accessor :verified_paid

    attr_accessor :tech_marked_paid

    attr_accessor :ticket_id

    attr_accessor :pdf_url

    attr_accessor :is_paid

    attr_accessor :location_id

    attr_accessor :po_number

    attr_accessor :contact_id

    attr_accessor :note

    attr_accessor :hardwarecost

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer_id' => :'customer_id',
        :'number' => :'number',
        :'date' => :'date',
        :'customer_business_then_name' => :'customer_business_then_name',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'due_date' => :'due_date',
        :'subtotal' => :'subtotal',
        :'total' => :'total',
        :'tax' => :'tax',
        :'verified_paid' => :'verified_paid',
        :'tech_marked_paid' => :'tech_marked_paid',
        :'ticket_id' => :'ticket_id',
        :'pdf_url' => :'pdf_url',
        :'is_paid' => :'is_paid',
        :'location_id' => :'location_id',
        :'po_number' => :'po_number',
        :'contact_id' => :'contact_id',
        :'note' => :'note',
        :'hardwarecost' => :'hardwarecost'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'customer_id' => :'Object',
        :'number' => :'Object',
        :'date' => :'Object',
        :'customer_business_then_name' => :'Object',
        :'created_at' => :'Object',
        :'updated_at' => :'Object',
        :'due_date' => :'Object',
        :'subtotal' => :'Object',
        :'total' => :'Object',
        :'tax' => :'Object',
        :'verified_paid' => :'Object',
        :'tech_marked_paid' => :'Object',
        :'ticket_id' => :'Object',
        :'pdf_url' => :'Object',
        :'is_paid' => :'Object',
        :'location_id' => :'Object',
        :'po_number' => :'Object',
        :'contact_id' => :'Object',
        :'note' => :'Object',
        :'hardwarecost' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WmSyncromspSwaggerClient::Body13` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WmSyncromspSwaggerClient::Body13`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'customer_business_then_name')
        self.customer_business_then_name = attributes[:'customer_business_then_name']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'subtotal')
        self.subtotal = attributes[:'subtotal']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'verified_paid')
        self.verified_paid = attributes[:'verified_paid']
      end

      if attributes.key?(:'tech_marked_paid')
        self.tech_marked_paid = attributes[:'tech_marked_paid']
      end

      if attributes.key?(:'ticket_id')
        self.ticket_id = attributes[:'ticket_id']
      end

      if attributes.key?(:'pdf_url')
        self.pdf_url = attributes[:'pdf_url']
      end

      if attributes.key?(:'is_paid')
        self.is_paid = attributes[:'is_paid']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'po_number')
        self.po_number = attributes[:'po_number']
      end

      if attributes.key?(:'contact_id')
        self.contact_id = attributes[:'contact_id']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'hardwarecost')
        self.hardwarecost = attributes[:'hardwarecost']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer_id == o.customer_id &&
          number == o.number &&
          date == o.date &&
          customer_business_then_name == o.customer_business_then_name &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          due_date == o.due_date &&
          subtotal == o.subtotal &&
          total == o.total &&
          tax == o.tax &&
          verified_paid == o.verified_paid &&
          tech_marked_paid == o.tech_marked_paid &&
          ticket_id == o.ticket_id &&
          pdf_url == o.pdf_url &&
          is_paid == o.is_paid &&
          location_id == o.location_id &&
          po_number == o.po_number &&
          contact_id == o.contact_id &&
          note == o.note &&
          hardwarecost == o.hardwarecost
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [customer_id, number, date, customer_business_then_name, created_at, updated_at, due_date, subtotal, total, tax, verified_paid, tech_marked_paid, ticket_id, pdf_url, is_paid, location_id, po_number, contact_id, note, hardwarecost].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        WmSyncromspSwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
