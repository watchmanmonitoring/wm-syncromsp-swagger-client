=begin
#Syncro

#Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.    

OpenAPI spec version: v1
Contact: help@syncromsp.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module WmSyncromspSwaggerClient
  class Body27
    attr_accessor :discount_percent

    attr_accessor :expected_date

    attr_accessor :general_notes

    attr_accessor :other_cents

    attr_accessor :shipping_cents

    attr_accessor :shipping_notes

    attr_accessor :user_id

    attr_accessor :vendor_id

    attr_accessor :location_id

    attr_accessor :due_date

    attr_accessor :paid_date

    attr_accessor :order_date

    attr_accessor :delivery_tracking

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'discount_percent' => :'discount_percent',
        :'expected_date' => :'expected_date',
        :'general_notes' => :'general_notes',
        :'other_cents' => :'other_cents',
        :'shipping_cents' => :'shipping_cents',
        :'shipping_notes' => :'shipping_notes',
        :'user_id' => :'user_id',
        :'vendor_id' => :'vendor_id',
        :'location_id' => :'location_id',
        :'due_date' => :'due_date',
        :'paid_date' => :'paid_date',
        :'order_date' => :'order_date',
        :'delivery_tracking' => :'delivery_tracking'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'discount_percent' => :'Object',
        :'expected_date' => :'Object',
        :'general_notes' => :'Object',
        :'other_cents' => :'Object',
        :'shipping_cents' => :'Object',
        :'shipping_notes' => :'Object',
        :'user_id' => :'Object',
        :'vendor_id' => :'Object',
        :'location_id' => :'Object',
        :'due_date' => :'Object',
        :'paid_date' => :'Object',
        :'order_date' => :'Object',
        :'delivery_tracking' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WmSyncromspSwaggerClient::Body27` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WmSyncromspSwaggerClient::Body27`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'discount_percent')
        self.discount_percent = attributes[:'discount_percent']
      end

      if attributes.key?(:'expected_date')
        self.expected_date = attributes[:'expected_date']
      end

      if attributes.key?(:'general_notes')
        self.general_notes = attributes[:'general_notes']
      end

      if attributes.key?(:'other_cents')
        self.other_cents = attributes[:'other_cents']
      end

      if attributes.key?(:'shipping_cents')
        self.shipping_cents = attributes[:'shipping_cents']
      end

      if attributes.key?(:'shipping_notes')
        self.shipping_notes = attributes[:'shipping_notes']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'vendor_id')
        self.vendor_id = attributes[:'vendor_id']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'paid_date')
        self.paid_date = attributes[:'paid_date']
      end

      if attributes.key?(:'order_date')
        self.order_date = attributes[:'order_date']
      end

      if attributes.key?(:'delivery_tracking')
        self.delivery_tracking = attributes[:'delivery_tracking']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          discount_percent == o.discount_percent &&
          expected_date == o.expected_date &&
          general_notes == o.general_notes &&
          other_cents == o.other_cents &&
          shipping_cents == o.shipping_cents &&
          shipping_notes == o.shipping_notes &&
          user_id == o.user_id &&
          vendor_id == o.vendor_id &&
          location_id == o.location_id &&
          due_date == o.due_date &&
          paid_date == o.paid_date &&
          order_date == o.order_date &&
          delivery_tracking == o.delivery_tracking
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [discount_percent, expected_date, general_notes, other_cents, shipping_cents, shipping_notes, user_id, vendor_id, location_id, due_date, paid_date, order_date, delivery_tracking].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        WmSyncromspSwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
