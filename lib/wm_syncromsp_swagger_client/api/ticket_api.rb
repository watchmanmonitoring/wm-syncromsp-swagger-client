=begin
#Syncro

#Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.    

OpenAPI spec version: v1
Contact: help@syncromsp.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

module WmSyncromspSwaggerClient
  class TicketApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a paginated list of Tickets
    # Required permission: Tickets - List/Search Single-Customer Users can only access own tickets. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :customer_id Any Ticket with customer_id equal to the parameter.
    # @option opts [Integer] :contact_id Any Ticket with contact_id equal to the parameter.
    # @option opts [String] :number Any Ticket with number equal to the parameter.
    # @option opts [DateTime] :resolved_after Returns Tickets resolved after the date. Example \&quot;2019-01-23\&quot;.
    # @option opts [DateTime] :created_after Returns Tickets created after the date. Example \&quot;2019-02-25\&quot;.
    # @option opts [DateTime] :since_updated_at Returns Tickets updated after the date. Example \&quot;2019-02-25\&quot;.
    # @option opts [String] :status Any Ticket with status equal to the parameter. Examples \&quot;New\&quot;, \&quot;In Progress\&quot;, \&quot;Resolved\&quot;, \&quot;Invoiced\&quot;, \&quot;Waiting for Parts\&quot;, \&quot;Waiting on Customer\&quot;, \&quot;Scheduled\&quot;, \&quot;Customer Reply\&quot;, \&quot;Not Closed\&quot;.
    # @option opts [String] :query Search query
    # @option opts [Integer] :user_id Any Ticket assigned to a User ID
    # @option opts [BOOLEAN] :mine Any Ticket assigned to the current user
    # @option opts [Integer] :ticket_search_id Returns results of a Ticket Search
    # @option opts [Integer] :page Returns provided page of results, each &#x27;page&#x27; contains 25 results
    # @return [nil]
    def tickets_get(opts = {})
      tickets_get_with_http_info(opts)
      nil
    end

    # Returns a paginated list of Tickets
    # Required permission: Tickets - List/Search Single-Customer Users can only access own tickets. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :customer_id Any Ticket with customer_id equal to the parameter.
    # @option opts [Integer] :contact_id Any Ticket with contact_id equal to the parameter.
    # @option opts [String] :number Any Ticket with number equal to the parameter.
    # @option opts [DateTime] :resolved_after Returns Tickets resolved after the date. Example \&quot;2019-01-23\&quot;.
    # @option opts [DateTime] :created_after Returns Tickets created after the date. Example \&quot;2019-02-25\&quot;.
    # @option opts [DateTime] :since_updated_at Returns Tickets updated after the date. Example \&quot;2019-02-25\&quot;.
    # @option opts [String] :status Any Ticket with status equal to the parameter. Examples \&quot;New\&quot;, \&quot;In Progress\&quot;, \&quot;Resolved\&quot;, \&quot;Invoiced\&quot;, \&quot;Waiting for Parts\&quot;, \&quot;Waiting on Customer\&quot;, \&quot;Scheduled\&quot;, \&quot;Customer Reply\&quot;, \&quot;Not Closed\&quot;.
    # @option opts [String] :query Search query
    # @option opts [Integer] :user_id Any Ticket assigned to a User ID
    # @option opts [BOOLEAN] :mine Any Ticket assigned to the current user
    # @option opts [Integer] :ticket_search_id Returns results of a Ticket Search
    # @option opts [Integer] :page Returns provided page of results, each &#x27;page&#x27; contains 25 results
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_get ...'
      end
      # resource path
      local_var_path = '/tickets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'contact_id'] = opts[:'contact_id'] if !opts[:'contact_id'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'resolved_after'] = opts[:'resolved_after'] if !opts[:'resolved_after'].nil?
      query_params[:'created_after'] = opts[:'created_after'] if !opts[:'created_after'].nil?
      query_params[:'since_updated_at'] = opts[:'since_updated_at'] if !opts[:'since_updated_at'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'mine'] = opts[:'mine'] if !opts[:'mine'].nil?
      query_params[:'ticket_search_id'] = opts[:'ticket_search_id'] if !opts[:'ticket_search_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a Ticket Line Item
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body33] :body 
    # @return [nil]
    def tickets_id_add_line_item_post(id, opts = {})
      tickets_id_add_line_item_post_with_http_info(id, opts)
      nil
    end

    # Creates a Ticket Line Item
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body33] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_add_line_item_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_add_line_item_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_add_line_item_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/add_line_item'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_add_line_item_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Attach a file to a Ticket
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [nil]
    def tickets_id_attach_file_url_post(id, opts = {})
      tickets_id_attach_file_url_post_with_http_info(id, opts)
      nil
    end

    # Attach a file to a Ticket
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_attach_file_url_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_attach_file_url_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_attach_file_url_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/attach_file_url'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_attach_file_url_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Charges a Ticket Timer
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [nil]
    def tickets_id_charge_timer_entry_post(id, opts = {})
      tickets_id_charge_timer_entry_post_with_http_info(id, opts)
      nil
    end

    # Charges a Ticket Timer
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_charge_timer_entry_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_charge_timer_entry_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_charge_timer_entry_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/charge_timer_entry'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_charge_timer_entry_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a Comment to a Ticket
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body31] :body 
    # @return [nil]
    def tickets_id_comment_post(id, opts = {})
      tickets_id_comment_post_with_http_info(id, opts)
      nil
    end

    # Adds a Comment to a Ticket
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body31] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_comment_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_comment_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_comment_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/comment'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_comment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Ticket by ID
    # Required permission: Tickets - Delete Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tickets_id_delete(id, opts = {})
      tickets_id_delete_with_http_info(id, opts)
      nil
    end

    # Deletes a Ticket by ID
    # Required permission: Tickets - Delete Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_delete"
      end
      # resource path
      local_var_path = '/tickets/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Ticket Attachment
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body36] :body 
    # @return [nil]
    def tickets_id_delete_attachment_post(id, opts = {})
      tickets_id_delete_attachment_post_with_http_info(id, opts)
      nil
    end

    # Deletes a Ticket Attachment
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body36] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_delete_attachment_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_delete_attachment_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_delete_attachment_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/delete_attachment'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_delete_attachment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Ticket Timer
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [nil]
    def tickets_id_delete_timer_entry_post(id, opts = {})
      tickets_id_delete_timer_entry_post_with_http_info(id, opts)
      nil
    end

    # Deletes a Ticket Timer
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_delete_timer_entry_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_delete_timer_entry_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_delete_timer_entry_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/delete_timer_entry'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_delete_timer_entry_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a Ticket by ID
    # Required permissions: \"Tickets - View Details\" or \"Tickets - View 'Their Ticket' Details (assigned to them)\" Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tickets_id_get(id, opts = {})
      tickets_id_get_with_http_info(id, opts)
      nil
    end

    # Retrieves a Ticket by ID
    # Required permissions: \&quot;Tickets - View Details\&quot; or \&quot;Tickets - View &#x27;Their Ticket&#x27; Details (assigned to them)\&quot; Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_get"
      end
      # resource path
      local_var_path = '/tickets/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Prints a Ticket by ID
    # Required permission: Tickets - View Details Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tickets_id_print_post(id, opts = {})
      tickets_id_print_post_with_http_info(id, opts)
      nil
    end

    # Prints a Ticket by ID
    # Required permission: Tickets - View Details Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_print_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_print_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_print_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/print'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_print_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an existing Ticket by ID
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [nil]
    def tickets_id_put(id, opts = {})
      tickets_id_put_with_http_info(id, opts)
      nil
    end

    # Updates an existing Ticket by ID
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_put"
      end
      # resource path
      local_var_path = '/tickets/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a Ticket Line Item
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body34] :body 
    # @return [nil]
    def tickets_id_remove_line_item_post(id, opts = {})
      tickets_id_remove_line_item_post_with_http_info(id, opts)
      nil
    end

    # Deletes a Ticket Line Item
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body34] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_remove_line_item_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_remove_line_item_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_remove_line_item_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/remove_line_item'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_remove_line_item_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Ticket Timer for a Ticket
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body32] :body 
    # @return [nil]
    def tickets_id_timer_entry_post(id, opts = {})
      tickets_id_timer_entry_post_with_http_info(id, opts)
      nil
    end

    # Create a Ticket Timer for a Ticket
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body32] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_timer_entry_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_timer_entry_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_timer_entry_post"
      end
      # resource path
      local_var_path = '/tickets/{id}/timer_entry'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_timer_entry_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an existing Ticket Line Item
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body35] :body 
    # @return [nil]
    def tickets_id_update_line_item_put(id, opts = {})
      tickets_id_update_line_item_put_with_http_info(id, opts)
      nil
    end

    # Updates an existing Ticket Line Item
    # Required permission: Tickets - Edit Single-Customer Users can only access own tickets. 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body35] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_update_line_item_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_update_line_item_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_update_line_item_put"
      end
      # resource path
      local_var_path = '/tickets/{id}/update_line_item'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_update_line_item_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an existing Ticket Timer
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body37] :body 
    # @return [nil]
    def tickets_id_update_timer_entry_put(id, opts = {})
      tickets_id_update_timer_entry_put_with_http_info(id, opts)
      nil
    end

    # Updates an existing Ticket Timer
    # Required permission: Ticket Timers - Overview 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body37] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_id_update_timer_entry_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_id_update_timer_entry_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TicketApi.tickets_id_update_timer_entry_put"
      end
      # resource path
      local_var_path = '/tickets/{id}/update_timer_entry'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_id_update_timer_entry_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a Ticket
    # Required permission: Tickets - Create Single-Customer Users can only access own tickets. 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [nil]
    def tickets_post(opts = {})
      tickets_post_with_http_info(opts)
      nil
    end

    # Creates a Ticket
    # Required permission: Tickets - Create Single-Customer Users can only access own tickets. 
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_post ...'
      end
      # resource path
      local_var_path = '/tickets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns Tickets Settings
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tickets_settings_get(opts = {})
      tickets_settings_get_with_http_info(opts)
      nil
    end

    # Returns Tickets Settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tickets_settings_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketApi.tickets_settings_get ...'
      end
      # resource path
      local_var_path = '/tickets/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketApi#tickets_settings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
